<?php

/**
 * @file
 * Allows customer make procurement request for out of stock product.
 */

/****************************
 * Drupal hooks
 ***************************/

/**
 * Implementation of hook_perm().
 */
function uc_oos_order_perm() {
  return array('order out of stock');
}

/**
 * Implementation of hook_menu()
 */
function uc_oos_order_menu() {
  $items = array();

  $items['admin/store/settings/uc_oos_order'] = array(
    'title' => 'Out of stock order settings',
    'access arguments' => array('administer store'),
    'description' => 'Configure out of stock order settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_oos_order_settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['uc_oos_order/in_stock'] = array(
    'title' => 'AJAX callback',
    'access arguments' => array('order out of stock'),
    'page callback' => 'uc_oos_order_in_stock_js',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implementation of hook_cron()
 */
function uc_oos_order_cron() {
  uc_oos_order_send_admin_email();
}

/**
 * Implementation of hook_mail()
 */
function uc_oos_order_mail($key, &$message, $params) {
  $lang = $message['language']->language;
  $variables = user_mail_tokens($params['account'], $language);
  switch($key) {
    case 'summary':
      // Set content type to HTML
      $message['headers'] = array(
        'MIME-Version' => '1.0',
        'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
        'Content-Transfer-Encoding' => '8Bit',
        'X-Mailer' => 'Drupal'
      );
      $message['subject'] = t('Out of stock order notification from !site', $variables, $lang);
      $message['body'][] = t("!count new orders:", array('!count' => $params['count']), $lang);
      $message['body'][] = $params['orders'];
      break;
  }
}

/**
 * Implementation of hook_form_alter()
 */
function uc_oos_order_form_alter(&$form, $form_state, $form_id) {
  if (!user_access('order out of stock')) {
    return FALSE;
  }

  $forms = array('uc_product_add_to_cart_form', 'uc_catalog_buy_it_now_form');
  foreach ($forms as $id) {
    if (substr($form_id, 0, strlen($id)) != $id) {
      continue;
    }

    // If there attributes on form
    if (isset($form['attributes'])) {
      $nid = $form['nid']['#value'];
      foreach ($form['attributes'] as $aid => $value) {
        // If not a property
        if (is_numeric($aid)) {
          // Skip unsupported attributes
          $attribute = uc_attribute_load($aid);
          // 1 is select and 2 is radio
          if ($attribute->display != 1 && $attribute->display != 2) {
            continue;
          }

          // Add AHAH
          $form['attributes'][$aid]['#ahah'] = array(
            'event' => 'change',
            'path' => 'uc_oos_order/in_stock',
            'wrapper' => 'uc-oos-order-wrapper',
            'method' => 'replace',
            'effect' => 'none',
            'progress' => array(
              'type' => 'throbber',
            )
          );
          // Collect for future stock checking
          $attrs[$aid] = key($value['#options']); // Get first options array key
        }
      }
      // Add wrapper for AHAH
      $form['#prefix'] = '<div id="uc-oos-order-wrapper">';
      $form['#suffix'] = '</div>';

      // Get stock value
      $stock = uc_out_of_stock_getstockinfo($nid, $attrs);
    }
    else {
      // Get stock value
      $model = $form['node']['#value']->model;
      $stock = uc_out_of_stock_getstockinfo_from_model($model);
    }
    // If product is in stock
    if ($stock !== NULL && $stock['stock'] <= 0) {
      // Set our custom action and submit button
      uc_oos_order_addtocart_form_modify($form, $form_state, $stock['model']);
    }
  return $form;
  }
}

/****************************
 * Helper functions
 ***************************/

/**
 * Returns settings form.
 */
function uc_oos_order_settings() {

  $form['uc_oos_order_user_html'] = array(
    '#type' => 'textarea',
    '#title' => t('Additional HTML'),
    '#default_value' =>variable_get('uc_oos_order_user_html', ''),
    '#description' => t('This HTML will be displayed below order button.'),
  );

  $form['uc_oos_order_format'] = filter_form(variable_get('uc_oos_order_format', FILTER_FORMAT_DEFAULT), NULL, array('uc_oos_order_format'));

  return system_settings_form($form);
}

/**
* AHAH callback function for uc_oos_order/in_stock.
* Checks product stock value and returns adjusted form.
*/
function uc_oos_order_in_stock_js() {
  // Get form from cache
  $form_state = array('submitted' => FALSE);
  $form_build_id = $_POST['form_build_id'];
  if (!$form = form_get_cache($form_build_id, $form_state)) {
    exit();
  }

  // Get stock value
  $nid = $form['nid']['#value'];
  $attrs = $_POST['attributes'];
  $stock = uc_out_of_stock_getstockinfo($nid, $attrs);

  // If product is in stock
  if ($stock === NULL || $stock['stock'] > 0) {
    // Restore original submit callbacks and button
    uc_oos_order_addtocart_form_restore($form, $form_state);
  }
  else {
    // Set custom submit callback and add submit button
    uc_oos_order_addtocart_form_modify($form, $form_state, $stock['model']);
  }

  form_set_cache($form_build_id, $form, $form_state);
  $form += array(
    '#post' => $_POST,
    '#programmed' => FALSE,
  );
  $form_id = $_POST['form_id'];
  $form = form_builder($form_id, $form, $form_state);
  // Remove dublicate wrapper
  unset($form['#prefix'], $form['#suffix']);

  $output = theme('status_messages') . drupal_render($form);
  return drupal_json(array('status' => TRUE, 'data' => $output));
}

/**
* Submit callback for add-to-cart form.
*/
function uc_oos_order_request($form, &$form_state) {
  global $user;

  if (!user_access('order out of stock')) {
    return FALSE;
  }

  // We need an email from anonymous customer
  if (!user_is_logged_in()) {
    if (isset($_SESSION['uc_oos_order']['mail'])
        && valid_email_address($_SESSION['uc_oos_order']['mail'])) {
      // Get it from session variable
      $mail = $_SESSION['uc_oos_order']['mail'];
    }
    else {
      // Get from form field
      $mail = $form_state['values']['mail'];
      if ($error = valid_email_address($mail)) {
        form_set_error('mail', $error);
      }
      else {
        // Save email in session variable
        $_SESSION['uc_oos_order']['mail'] = $mail;
      }
    }
  }

  // Get model from attributes
  if (isset($form_state['values']['attributes'])) {
    $nid = $form_state['values']['nid'];
    $attrs = $form_state['values']['attributes'];
    $stock = uc_out_of_stock_getstockinfo($nid, $attrs);
  }
  else {
    $stock = uc_out_of_stock_getstockinfo_from_model($form_state['values']['node']->model);
  }

  if (!uc_oos_order_order_exist($stock['model'], $user->uid, $mail)) {
    uc_oos_order_order_add($stock['model'], $user->uid, $mail);
    drupal_set_message(t('Order added.'));
  }
  else {
    // If order already exist - remove it
    uc_oos_order_order_del($stock['model'], $user->uid, $mail);
    drupal_set_message(t('Order removed.'));
  }
}

/**
* Check if order alredy exist in database.
*/
function uc_oos_order_order_exist($sku, $uid, $mail = '') {
  return db_result(db_query("SELECT rid FROM {uc_oos_order}
                              WHERE sku = '%s' AND uid = %d AND mail = '%s'",
                              $sku, $uid, $mail));
}

/**
* Writes new order to database.
*/
function uc_oos_order_order_add($sku, $uid, $mail = '') {
  $order = new stdClass;
  $order->sku     = $sku;
  $order->uid     = $uid;
  $order->mail    = $mail;
  $order->created = REQUEST_TIME;
  drupal_write_record('uc_oos_order', $order);
}

/**
* Deletes order from database.
*/
function uc_oos_order_order_del($sku, $uid, $mail = '') {
  return db_query("DELETE FROM {uc_oos_order} WHERE sku = '%s' AND uid = %d AND mail = '%s'",
                    $sku, $uid, $mail);
}

/**
 * Sets custom submit callback and adds submit button.
 *
 * @param array $from
 * @param array $form_state
 */
function uc_oos_order_addtocart_form_modify(&$form, &$form_state, $sku) {
  global $user;

  if (isset($_SESSION['uc_oos_order']['mail'])
      && valid_email_address($_SESSION['uc_oos_order']['mail'])) {
    // Get it from session variable
    $mail = $_SESSION['uc_oos_order']['mail'];
  }
  else {
    $mail = $form_state['values']['mail'];
  }

  // Check if order already exist
  $remove_order = uc_oos_order_order_exist($sku, $user->uid, $mail);

  // Save original submit and validate callbacks
  $form_state['storage']['uc_oos_order']['submit'] = $form['#submit'];
  $form_state['storage']['uc_oos_order']['validate'] = $form['#validate'];

  // Replace submit
  unset($form['#validate'], $form['#submit']);
  $form['#submit'][] = 'uc_oos_order_request';

  // Hide original and add custom submit button
  $form['submit']['#access'] = FALSE;
  $form['uc-oos-order']  = array(
    '#type' => 'fieldset',
    '#title' => t('Order out of stock'),
    '#collapsible' => FALSE,
  );
  if (!user_is_logged_in()) {
    $form['uc-oos-order']['mail'] = array(
      '#type' => 'textfield',
      '#title' => t('E-mail address'),
      '#maxlength' => EMAIL_MAX_LENGTH,
      '#required' => TRUE,
    );
    if ($mail) {
      $form['uc-oos-order']['mail']['#type'] = 'value';
      $form['uc-oos-order']['mail']['#default_value'] = $mail;
    }
  }
  $form['uc-oos-order']['submit-order']  = array(
    '#type' => 'submit',
    '#value' => $remove_order ? t('Remove order') : t('Order product'),
  );
  // Add user defined HTML
  $html = check_markup(variable_get('uc_oos_order_user_html', UC_OUT_OF_STOCK_DEFAULT_HTML), variable_get('uc_oos_order_format', FILTER_FORMAT_DEFAULT), FALSE);
  if ($html) {
    $form['submit-order']['#suffix'] = $html;
  }
}

/**
 * Restores original submit callbacks and submit button.
 *
 * @param array $from
 * @param array $form_state
 */
function uc_oos_order_addtocart_form_restore(&$form, &$form_state) {
  // Restore original submit and validate callbacks
  if (isset($form_state['storage']['uc_oos_order']['submit'])) {
    $form['#submit'] = $form_state['storage']['uc_oos_order']['submit'];
  }
  if (isset($form_state['storage']['uc_oos_order']['validate'])) {
    $form['#validate'] = $form_state['storage']['uc_oos_order']['validate'];
  }
  // Delete $form_state storage with custom submit button
  unset($form['uc-oos-order'], $form_state['storage']['uc_oos_order']);
  // Show original one
  $form['submit']['#access'] = TRUE;
}

/**
 * Generates orders summary message and sends it to admin email.
 */
function uc_oos_order_send_admin_email() {
  // Get all orders
  $result = db_query('SELECT * FROM {uc_oos_order}');
  while ($order = db_fetch_object($result)) {
    if ($order->uid !== 0) {
      // Get username if it not anonymous order
      $user = user_load(array('uid' => $order->uid));
      $order->username = $user->name;
    }
    // Get product name
    $res = db_fetch_object(db_query("SELECT n.title, pa.combination FROM {uc_product_adjustments} pa
      JOIN {node} n ON pa.nid = n.nid WHERE pa.model = '%s'", $order->sku));
    // If model has attributes
    if ($res) {
      $product = $res->title . ' (';
      foreach ($attrs = unserialize($res->combination) as $aid => $oid) {
        $product .= uc_attribute_load($aid)->name . ': ' . uc_attribute_option_load($oid)->name;
        $product .= ', ';
      };
      $product = rtrim($product, ', ') . ')';
      $order->product = $product;
    }
    else {
      $res = db_fetch_object(db_query("SELECT n.title FROM {uc_products} pr
        JOIN {node} n ON pr.nid = n.nid WHERE pr.model = '%s'", $order->sku));
      $order->product = $res->title;
    }
    $orders[] = array(
      'customer' => trim($order->mail) === '' ? $order->username : $order->mail,
      'product' => $order->product,
      'sku' => $order->sku,
      'date' => format_date($order->created, 'small'),
      );
    $rids[] = $order->rid;
  }
  // Exit if no orders
  if (($count = count($orders)) === 0) {
    return FALSE;
  }

  // Render table with data
  $header = array(
    t('Customer'),
    t('Product'),
    t('SKU'),
    t('Date'),
  );
  $attributes['style'] = 'font-size: 0.8em';
  $attributes['border'] = '1';
  $table = theme('table', $header, $orders, $attributes);

  $admin = user_load(array('uid' => 1));
  $params = array(
    'account' => $admin,
    'count'   => $count,
    'orders'  => $table,
  );

  $message = drupal_mail('uc_oos_order', 'summary', uc_store_email_from(), $admin->language, $params);

  if ($message['result']) {
    db_query('DELETE FROM {uc_oos_order} WHERE  rid IN (' . db_placeholders($rids) . ")", $rids);
  }
}
